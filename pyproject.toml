[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project]
authors = [{name = "POIA developers"}]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]
dependencies = [
    "joblib>=1.2.0",
    "lxml",
    "nibabel>=5.2.0",
    "numpy>=1.22.4",
    "pandas>=2.2.0",
    "requests>=2.25.0",
    "scikit-learn>=1.4.0",
    "scipy>=1.8.0",
    "packaging"
]
description = "Package Of Interest Auditor"
# Version from setuptools_scm
dynamic = ["version"]
license = {text = "new BSD"}
maintainers = [{name = "RÃ©mi Gau", email = "remi.gau@inria.fr"}]
name = "nilearn"
readme = "README.rst"
requires-python = ">=3.11"

[project.optional-dependencies]
# A combination of dependencies useful for developers
dev = ["nilearn[test]"]
# For running unit and docstring tests
test = [
    "coverage",
    "pytest>=6.0.0",
    "pytest-cov",
    "pytest-randomly",
    "pytest-xdist[psutil]",
    "pytest-timeout"
]

[project.urls]
Homepage = "https://nilearn.github.io"

[tool.codespell]
builtin = "clear,rare,en-GB_to_en-US"
skip = "./.git,*.cff,*/tmp,.mypy_cache,env,venv"

[tool.hatch.build.hooks.vcs]
version-file = "src/poia/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/poia"]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
allow_redefinition = false
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = ['tests/test_.*', 'src/poia/_version.py']
warn_unreachable = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "plotly.*",
    "rich.*",
    "matplotlib.*",
    "nbformat.*",
    "nbconvert.*",
    "packaging.*",
    "loguru.*",
    "matplotlib_venn.*",
    "marimo.*"
]

[tool.pytest.ini_options]
addopts = "-ra --strict-config --strict-markers -s -vv --timeout=60"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
junit_family = "xunit2"
log_cli_level = "INFO"
minversion = "6.0"
xfail_strict = true

[tool.ruff]
include = ["pyproject.toml", "src/**/*.py"]
indent-width = 4
line-length = 100

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = [
    "ARG005",
    "B904",
    "D105",
    "D205",
    "D208",
    "D301",
    "E741",
    "ERA001",
    "FURB105",
    "N802",
    "N803",
    "N806",
    "PD901",
    "PERF203",
    "PIE790",
    "PLR2004",
    "PTH207",
    "UP038",
    # https://github.com/astral-sh/ruff/issues/7871
    # Avoid linter rules conflicting with the formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191"
]
# List of all the ruff rules (includes why the rule matters)
# https://docs.astral.sh/ruff/rules/
select = [
    "ARG",
    "B",
    "C4",
    "C90",
    "D",
    "E",
    "ERA",
    "F",
    "FLY",
    "FURB",
    "I",
    "N",
    "NPY",
    "PERF",
    "PIE",
    "PTH",
    "PD",
    "PGH",
    "PLR",
    "RUF",
    "SIM",
    "UP",
    "W"
]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 29

[tool.ruff.lint.per-file-ignores]
"**/{doc}/*" = ["D103"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-args
max-args = 15
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-branches
max-branches = 33
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-returns
max-returns = 10
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-statements
max-statements = 80
